// @vitest-environment node

import { subtractFee, getForwarderStakeUserData } from '../preparers/forwarder'
import { parseUnits, decodeFunctionData } from 'viem'
import ForwarderABI from '../abis/Forwarder.json'

describe('preparers for forwarder', () => {
  describe('subtractFee', () => {
    it('should subtract fees for host-to-host', () => {
      expect(subtractFee(10000, false)).toEqual(9975n)
      expect(subtractFee('10000', false)).toEqual(9975n)
    })
    it('should subtract fees for native-to-host', () => {
      expect(subtractFee(10000, true)).toEqual(9990n)
      expect(subtractFee('10000', true)).toEqual(9990n)
    })
  })

  describe('getForwarderStakeUserData', () => {
    it('should calculate getForwarderStakeUserData when staking from host chain', () => {
      const res = getForwarderStakeUserData({
        amount: parseUnits('0.797999999999789996'),
        duration: 7 * 86400,
        receiverAddress: '0xdDb5f4535123DAa5aE343c24006F4075aBAF5F7B',
        fromNative: false
      })
      // Refs: https://github.com/pnetwork-association/dao-v2-contracts/blob/feat/v3/test/fork/dao.test.js#L1307
      const { args } = decodeFunctionData({
        abi: ForwarderABI,
        data: '0x996adf550000000000000000000000000000000000000000000000000b1310c5a2bfcbac00000000000000000000000099405b4e46256dd28e424a0edf296a28e2ae32a0000000000000000000000000000000000000000000000000000000000000008000f1918e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000008805aa0c1a8e59b03fa95740f691e28942cf44f6000000000000000000000000dee8ebe2b7152eccd935fd67134bf1bad55302bc0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000dee8ebe2b7152eccd935fd67134bf1bad55302bc0000000000000000000000000000000000000000000000000b0bfa54806c1db90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000642b54f551000000000000000000000000ddb5f4535123daa5ae343c24006f4075abaf5f7b0000000000000000000000000000000000000000000000000b0bfa54806c1db90000000000000000000000000000000000000000000000000000000000093a8000000000000000000000000000000000000000000000000000000000'
      })
      expect(res).toStrictEqual(args[2])
    })
  })
})
